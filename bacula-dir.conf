Director {                            # define myself
  Name = cronus-dir
  DIRport = 9101                # where we listen for UA connections
  QueryFile = "/opt/bacula/scripts/query.sql"
  WorkingDirectory = "/var/share/bacula/working"
  PidDirectory = "/var/run"
  Maximum Concurrent Jobs = 14
  Password = "@DIRPASSWORD@"         # Console password
  Messages = Daemon
  DirAddress = 10.1.29.17
}

JobDefs {
  Name = "DefaultJob"
  Type = Backup
  Level = Incremental
  Client = cronus-fd
  FileSet = "Full Set"
  Schedule = "WeeklyCycle"
  Storage = QUANTUMTapeLibrary
  #Storage = Disks
  Spool Data = yes    # Avoid shoe-shine with QUANTUMTapeLibrary
  Messages = Standard
  SpoolAttributes = yes
  Pool = RemoteFile 
  Priority = 10
  Write Bootstrap = "/var/share/bacula/working/%c.bsr"
}

# Definition of file Virtual Autochanger device
Autochanger {
  Name = Disks
# Do not use "localhost" here
  Address = cronus                # N.B. Use a fully qualified name here
  SDPort = 9103
  Password = "@SDPASSWORD@"
  Device = DiskChanger
  Media Type = Disks
  Maximum Concurrent Jobs = 10        # run up to 10 jobs a the same time
  Autochanger = Disks                 # point to ourself
}

# Definition of file Virtual Autochanger device
Autochanger {
  Name = QUANTUMTapeLibrary
# Do not use "localhost" here
  Address = cronus                # N.B. Use a fully qualified name here
  SDPort = 9103
  Password = "@SDPASSWORD@"
  AutoChanger = Yes
  Device     = LTO5
  Media Type = LTO
  Maximum Concurrent Jobs = 14        # run up to 10 jobs a the same time
  Autochanger = QUANTUMTapeLibrary                 # point to ourself
}

# Backup the catalog database (after the nightly save)
Job {
  Name = "BackupCatalog"
  JobDefs = "DefaultJob"
  Level = Full
  FileSet="Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  # This creates an ASCII copy of the catalog
  # Arguments to make_catalog_backup.pl are:
  #  make_catalog_backup.pl <catalog-name>
  RunBeforeJob = "/opt/bacula/scripts/make_catalog_backup.pl MyCatalog"
  # This deletes the copy of the catalog
  RunAfterJob  = "/opt/bacula/scripts/delete_catalog_backup"
  Write Bootstrap = "/var/share/bacula/working/%n.bsr"
  Priority = 11                   # run after main backup
}

#
# Standard Restore template, to be changed by Console program
#  Only one such job is needed for all Jobs/Clients/Storage ...
#
Job {
  Name = "RestoreFiles"
  Type = Restore
  Client=cronus-fd
  Storage = QUANTUMTapeLibrary
# The FileSet and Pool directives are not used by Restore Jobs
# but must not be removed
  FileSet="Full Set"
  Pool = RemoteFile
  Messages = Standard
  Where = /var/share/bacula/restore
}


# List of files to be backed up
FileSet {
  Name = "Full Set"
  Include {
    Options {
      signature = MD5
      compression = GZIP
    }
#
#  Put your list of files here, preceded by 'File =', one per line
#    or include an external list with:
#
#    File = <file-name
#
#  Note: / backs up everything on the root partition.
#    if you have other partitions such as /usr or /home
#    you will probably want to add them too.
#
#  By default this is defined to point to the Bacula binary
#    directory to give a reasonable FileSet to backup to
#    disk storage during initial testing.
#
    File = /opt/bacula/etc
  }

#
# If you backup the root directory, the following two excluded
#   files can be useful
#
  Exclude {
    File = /var/share/bacula/working
    File = /var/share/bacula/backup
    File = /proc
    File = /tmp
    File = /sys
    File = /nsr
  }
}

#
# When to do the backups, full backup on first sunday of the month,
#  differential (i.e. incremental since full) every other sunday,
#  and incremental backups other days
Schedule {
  Name = "WeeklyCycle"
  Run = Full 1st sun at 23:05
  Run = Differential 2nd-5th sun at 23:05
  Run = Incremental mon-sat at 23:05
}

# This schedule does the catalog. It starts after the WeeklyCycle
Schedule {
  Name = "WeeklyCycleAfterBackup"
  Run = Full sun-sat at 23:10
}

# This is the backup of the catalog
FileSet {
  Name = "Catalog"
  Include {
    Options {
      signature = MD5
    }
    File = "/var/share/bacula/working/baculadb.sql"
  }
}

# Generic catalog service
Catalog {
  Name = MyCatalog
  DB Address = "mysqlsrv.dcs.bbk.ac.uk"
  dbname = "baculadb"; dbuser = "bacula"; dbpassword = "MySQLPassword"
}

# Reasonable message delivery -- send most everything to email address
#  and to the console
Messages {
  Name = Standard
#
# NOTE! If you send to two email or more email addresses, you will need
#  to replace the %r in the from field (-f part) with a single valid
#  email address in both the mailcommand and the operatorcommand.
#  What this does is, it sets the email address that emails would display
#  in the FROM field, which is by default the same email as they're being
#  sent to.  However, if you send email to more than one address, then
#  you'll have to set the FROM address manually, to a single address.
#  for example, a 'no-reply@mydomain.com', is better since that tends to
#  tell (most) people that its coming from an automated source.

#
  mailcommand = "/opt/bacula/bin/bsmtp -h smtp.dcs.bbk.ac.uk -f \"\(Bacula\) \<%r\>\" -s \"Bacula: %t %e of %c %l\" %r"
  operatorcommand = "/opt/bacula/bin/bsmtp -h smtp.dcs.bbk.ac.uk -f \"\(Bacula\) \<%r\>\" -s \"Bacula: Intervention needed for %j\" %r"
  mail = backup@dcs.bbk.ac.uk = all, !skipped
  operator = backup@dcs.bbk.ac.uk = mount
  console = all, !skipped, !saved
#
# WARNING! the following will create a file that you must cycle from
#          time to time as it will grow indefinitely. However, it will
#          also keep all your messages if they scroll off the console.
#
  append = "/var/share/bacula/log/bacula.log" = all, !skipped
  catalog = all
}


#
# Message delivery for daemon messages (no job).
Messages {
  Name = Daemon
  mailcommand = "/opt/bacula/bin/bsmtp -h smtp.dcs.bbk.ac.uk -f \"\(Bacula\) \<%r\>\" -s \"Bacula daemon message\" %r"
  mail = backup@dcs.bbk.ac.uk = all, !skipped
  console = all, !skipped, !saved
  append = "/var/share/bacula/log/bacula.log" = all, !skipped
}

# Default pool definition
Pool {
  Name = Default
  Pool Type = Backup
  Recycle = yes                       # Bacula can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 365 days         # one year
  ##Maximum Volume Bytes = 180G          # Limit Volume size to something reasonable
  ##Maximum Volumes = 100               # Limit number of Volumes in Pool
}

# Scratch pool definition
Pool {
  Name = Scratch
  Pool Type = Backup
}

Pool {
  Name = RemoteFile
  Pool Type = Backup
  #Label Format = "Remote-"		# Remove when using QUANTUMTapeLibrary
  Recycle = yes # Bacula can automatically recycle Volumes
  AutoPrune = yes # Prune expired volumes
  Volume Retention = 365 days # one year
  ##Maximum Volume Bytes = 300G # Limit Volume size to something reasonable
  ##Maximum Volumes = 100 # Limit number of Volumes in Pool
}

#
# Restricted console used by tray-monitor to get the status of the director
#
Console {
  Name = cronus-mon
  Password = "@CONSOLEPASSWORD@"
  CommandACL = status, .status
}

# Client definition files
@/opt/bacula/etc/client.conf

# FileSet resource for clients
@/opt/bacula/etc/filesets.conf

